module tb;
  reg clk,reset;
  reg w_en,r_en;
  reg [7:0] data_in;
  wire [7:0] data_out;
  wire full,empty;
  
  synfifo fifo(clk,reset,w_en,r_en,data_in,data_out,full,empty);
  
  initial begin
    clk=0;
    forever #3 clk=~clk;
  end
  
  initial begin
    reset=0;
    w_en=0;
    r_en=0;
    #5;
    reset=1;
    drive(20);
    drive(40);
    #10;
    $finish;
  end
  
  task push();
    if(!full) begin
      w_en=1;
      data_in<=$random;
      #1;
      $display("Push:w_en=%0h,r_en=%0h,data_in=%0h",$time,w_en,r_en,data_in);
    end
    else
      $display("FIFO is Full");
  endtask
  
  task pop();
    if(!empty) begin
      r_en=1;
      #1;
      $display("Pop:w_en=%0h,r_en=%0h,data_out=%0h",$time,w_en,r_en,data_out);
    end
    else
      $display("FIFO is Empty");
  endtask
  
  task drive(int delay);
    w_en=0;r_en=0;
    fork begin
      repeat(10) begin @(posedge clk)
        push();
      end
      w_en=0;
    end
      begin
        #(delay);
        repeat(10) begin @(posedge clk)
        pop();
      end
      r_en=0;
    end
    join
  endtask
  
  initial begin
    $dumpfile("synfifo.vcd");
    $dumpvars;
  end
endmodule
