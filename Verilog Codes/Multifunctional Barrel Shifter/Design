module top(input [7:0] a,
           input [2:0] con,
           input lr,
           output [7:0] out);
  
  wire [7:0] rot_left,rot_right;
  
  barrel_right barr(a,con,rot_right);
  barrel_left barl(a,con,rot_left);
  mux mx(rot_left,rot_right,lr,out);
  
endmodule

module barrel_right(
  input [7:0] a,
  input [2:0] con,
  output reg [7:0] out);
  
  always@(*) begin
    case(con)
      3'd0: out=a;
      3'd1: out={a[0],a[7:1]};
      3'd2: out={a[1:0],a[7:2]};
      3'd3: out={a[2:0],a[7:3]};
      3'd4: out={a[3:0],a[7:4]};
      3'd5: out={a[4:0],a[7:5]};
      3'd6: out={a[5:0],a[7:6]};
      default:out={a[6:0],a[7]};
    endcase
  end
   
endmodule

module barrel_left(
  input [7:0] a,
  input [2:0] con,
  output reg [7:0] out);
  
  always@(*) begin
    case(con)
      3'd0: out=a;
      3'd1: out={a[6:0],a[7]};
      3'd2: out={a[5:0],a[7:6]};
      3'd3: out={a[4:0],a[7:5]};
      3'd4: out={a[3:0],a[7:4]};
      3'd5: out={a[2:0],a[7:3]};
      3'd6: out={a[1:0],a[7:2]};
      default:out={a[0],a[7:1]};
    endcase
  end
endmodule
      
module mux(
  input [7:0] i0,i1,
  input sel,
  output [7:0] y);
  
  assign y=sel?i1:i0;
  
endmodule
